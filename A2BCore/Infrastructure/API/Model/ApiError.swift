//
// ApiError.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

struct ApiError: Codable {

    enum Status: String, Codable {
        case _100CONTINUE = "CONTINUE"
        case _101SWITCHINGPROTOCOLS = "SWITCHING_PROTOCOLS"
        case _102PROCESSING = "PROCESSING"
        case _103CHECKPOINT = "CHECKPOINT"
        case _200OK = "OK"
        case _201CREATED = "CREATED"
        case _202ACCEPTED = "ACCEPTED"
        case _203NONAUTHORITATIVEINFORMATION = "NON_AUTHORITATIVE_INFORMATION"
        case _204NOCONTENT = "NO_CONTENT"
        case _205RESETCONTENT = "RESET_CONTENT"
        case _206PARTIALCONTENT = "PARTIAL_CONTENT"
        case _207MULTISTATUS = "MULTI_STATUS"
        case _208ALREADYREPORTED = "ALREADY_REPORTED"
        case _226IMUSED = "IM_USED"
        case _300MULTIPLECHOICES = "MULTIPLE_CHOICES"
        case _301MOVEDPERMANENTLY = "MOVED_PERMANENTLY"
        case _302FOUND = "FOUND"
        case _302MOVEDTEMPORARILY = "MOVED_TEMPORARILY"
        case _303SEEOTHER = "SEE_OTHER"
        case _304NOTMODIFIED = "NOT_MODIFIED"
        case _305USEPROXY = "USE_PROXY"
        case _307TEMPORARYREDIRECT = "TEMPORARY_REDIRECT"
        case _308PERMANENTREDIRECT = "PERMANENT_REDIRECT"
        case _400BADREQUEST = "BAD_REQUEST"
        case _401UNAUTHORIZED = "UNAUTHORIZED"
        case _402PAYMENTREQUIRED = "PAYMENT_REQUIRED"
        case _403FORBIDDEN = "FORBIDDEN"
        case _404NOTFOUND = "NOT_FOUND"
        case _405METHODNOTALLOWED = "METHOD_NOT_ALLOWED"
        case _406NOTACCEPTABLE = "NOT_ACCEPTABLE"
        case _407PROXYAUTHENTICATIONREQUIRED = "PROXY_AUTHENTICATION_REQUIRED"
        case _408REQUESTTIMEOUT = "REQUEST_TIMEOUT"
        case _409CONFLICT = "CONFLICT"
        case _410GONE = "GONE"
        case _411LENGTHREQUIRED = "LENGTH_REQUIRED"
        case _412PRECONDITIONFAILED = "PRECONDITION_FAILED"
        case _413PAYLOADTOOLARGE = "PAYLOAD_TOO_LARGE"
        case _413REQUESTENTITYTOOLARGE = "REQUEST_ENTITY_TOO_LARGE"
        case _414URITOOLONG = "URI_TOO_LONG"
        case _414REQUESTURITOOLONG = "REQUEST_URI_TOO_LONG"
        case _415UNSUPPORTEDMEDIATYPE = "UNSUPPORTED_MEDIA_TYPE"
        case _416REQUESTEDRANGENOTSATISFIABLE = "REQUESTED_RANGE_NOT_SATISFIABLE"
        case _417EXPECTATIONFAILED = "EXPECTATION_FAILED"
        case _418IAMATEAPOT = "I_AM_A_TEAPOT"
        case _419INSUFFICIENTSPACEONRESOURCE = "INSUFFICIENT_SPACE_ON_RESOURCE"
        case _420METHODFAILURE = "METHOD_FAILURE"
        case _421DESTINATIONLOCKED = "DESTINATION_LOCKED"
        case _422UNPROCESSABLEENTITY = "UNPROCESSABLE_ENTITY"
        case _423LOCKED = "LOCKED"
        case _424FAILEDDEPENDENCY = "FAILED_DEPENDENCY"
        case _426UPGRADEREQUIRED = "UPGRADE_REQUIRED"
        case _428PRECONDITIONREQUIRED = "PRECONDITION_REQUIRED"
        case _429TOOMANYREQUESTS = "TOO_MANY_REQUESTS"
        case _431REQUESTHEADERFIELDSTOOLARGE = "REQUEST_HEADER_FIELDS_TOO_LARGE"
        case _451UNAVAILABLEFORLEGALREASONS = "UNAVAILABLE_FOR_LEGAL_REASONS"
        case _500INTERNALSERVERERROR = "INTERNAL_SERVER_ERROR"
        case _501NOTIMPLEMENTED = "NOT_IMPLEMENTED"
        case _502BADGATEWAY = "BAD_GATEWAY"
        case _503SERVICEUNAVAILABLE = "SERVICE_UNAVAILABLE"
        case _504GATEWAYTIMEOUT = "GATEWAY_TIMEOUT"
        case _505HTTPVERSIONNOTSUPPORTED = "HTTP_VERSION_NOT_SUPPORTED"
        case _506VARIANTALSONEGOTIATES = "VARIANT_ALSO_NEGOTIATES"
        case _507INSUFFICIENTSTORAGE = "INSUFFICIENT_STORAGE"
        case _508LOOPDETECTED = "LOOP_DETECTED"
        case _509BANDWIDTHLIMITEXCEEDED = "BANDWIDTH_LIMIT_EXCEEDED"
        case _510NOTEXTENDED = "NOT_EXTENDED"
        case _511NETWORKAUTHENTICATIONREQUIRED = "NETWORK_AUTHENTICATION_REQUIRED"
        
        func toLBStatusCode() -> LBErrorStatusCode {
            
            switch self {
            case ._404NOTFOUND:
                return .notFound
            case ._401UNAUTHORIZED:
                return .unauthorized
            case ._408REQUESTTIMEOUT, ._504GATEWAYTIMEOUT:
                return .timeout
            case ._400BADREQUEST:
                return .badRequest
            case ._403FORBIDDEN:
                return .forbidden
            case ._500INTERNALSERVERERROR:
                return .internalServerError
            case ._502BADGATEWAY:
                return .badGateway
            default:
                return .unknown(self.getCode())
            }
        }
        
        private func getCode() -> Int {
            if let range = self.rawValue.range(of: #"\d{3}"#, options: .regularExpression) {
                return Int(self.rawValue[range]) ?? 0
            }
            return 0
        }
    }
    
    let status: Status?
    /** timestamp */
    let timestamp: String?
    /** message */
    let message: String?
    /** debugMessage */
    let debugMessage: String?

    init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)

        status = try values.decodeIfPresent(Status.self, forKey: .status)
        timestamp = try values.decodeIfPresent(String.self, forKey: .timestamp)
        debugMessage = try values.decodeIfPresent(String.self, forKey: .debugMessage)
        if let message = try values.decodeIfPresent(String.self, forKey: .message) {

            let data = message.data(using: .utf8)!
            if let jsonArray = try? JSONSerialization.jsonObject(with: data, options : .allowFragments) as? [String: Any] {
                self.message = jsonArray["message"] as? String
            } else {
                self.message = message
            }
        } else {
            self.message = nil
        }
    }
    
    func isEmpty() -> Bool {
        return status == nil && timestamp == nil && debugMessage == nil
    }
    
    func toLBError(url: String, headers: [String: String]?, parameters: [String: Any]?, method: HTTPMethod) -> LBError {
        return LBError(message: message, statusCode: status?.toLBStatusCode(), url: url, headers: headers, parameters: parameters, method: method, error: nil)
    }
}
