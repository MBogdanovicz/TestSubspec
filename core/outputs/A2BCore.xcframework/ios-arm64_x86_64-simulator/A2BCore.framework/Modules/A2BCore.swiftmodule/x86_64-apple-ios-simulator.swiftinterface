// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios12.3-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name A2BCore
@_exported import A2BCore
import Foundation
import Swift
import UIKit
import _Concurrency
public struct LBError : Swift.Error {
  public let message: Swift.String?
  public let statusCode: A2BCore.LBErrorStatusCode?
  public let url: Swift.String?
  public let headers: [Swift.String : Swift.String]?
  public let parameters: [Swift.String : Any]?
  public let method: A2BCore.HTTPMethod?
  public let error: Swift.Error?
  public init(message: Swift.String? = nil, statusCode: Swift.Int? = nil, url: Swift.String? = nil, headers: [Swift.String : Swift.String]? = nil, parameters: [Swift.String : Any]? = nil, method: A2BCore.HTTPMethod? = nil, error: Swift.Error?)
  public init(message: Swift.String? = nil, statusCode: A2BCore.LBErrorStatusCode?, url: Swift.String? = nil, headers: [Swift.String : Swift.String]? = nil, parameters: [Swift.String : Any]? = nil, method: A2BCore.HTTPMethod? = nil, error: Swift.Error? = nil)
  public func mapToNSError() -> Foundation.NSError
}
public enum LBErrorStatusCode : Swift.Equatable {
  case notFound
  case unauthorized
  case timeout
  case badRequest
  case forbidden
  case internalServerError
  case badGateway
  case parsing
  case database
  case serverUninitialized
  case databaseUninitialized
  case unknown(_: Swift.Int)
  public func value() -> Swift.String
  public static func == (a: A2BCore.LBErrorStatusCode, b: A2BCore.LBErrorStatusCode) -> Swift.Bool
}
extension Swift.Encodable {
  public var dictionary: [Swift.String : Any] {
    get
  }
}
extension Swift.Sequence {
  public func asArray() -> [Self.Element]
}
extension Swift.Optional where Wrapped == Swift.String {
  public var emptyIfNil: Swift.String {
    get
  }
}
extension Swift.Int64 {
  public func asDate() -> Foundation.Date
  public func secondsToHoursMinutesSeconds() -> (hour: Swift.Int, minute: Swift.Int, second: Swift.Int)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func present(error: A2BCore.LBError?)
}
@_hasMissingDesignatedInitializers public class NetworkRequestHandler {
  public static func apiRequest<T>(request: () throws -> T, exceptionMapper: (Swift.Error) -> Swift.Error) throws -> T
  public static func apiRequest<T>(request: () -> T) -> T
  @objc deinit
}
public enum HTTPMethod : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.URLSession {
  public func dataTask(with url: Swift.String, method: A2BCore.HTTPMethod = .post, headers: [Swift.String : Swift.String]? = nil, parameters: [Swift.String : Any]? = nil, completionHandler: @escaping (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ statusCode: Swift.Int?, _ error: A2BCore.LBError?) -> Swift.Void)
  public func dataTask(with url: Swift.String, method: A2BCore.HTTPMethod = .post, headers: [Swift.String : Swift.String]? = nil, parameters: [Swift.String : Any]? = nil, completionHandler: @escaping (_ data: [[Swift.String : Any]]?, _ response: Foundation.URLResponse?, _ statusCode: Swift.Int?, _ error: A2BCore.LBError?) -> Swift.Void)
  public func dataTask(with url: Swift.String, method: A2BCore.HTTPMethod = .post, headers: [Swift.String : Swift.String]? = nil, parameters: [Swift.String : Any]? = nil, completionHandler: @escaping (_ data: [Swift.String : Any]?, _ response: Foundation.URLResponse?, _ statusCode: Swift.Int?, _ error: A2BCore.LBError?) -> Swift.Void)
  public func dataTask<T>(with url: Swift.String, method: A2BCore.HTTPMethod = .post, headers: [Swift.String : Swift.String]? = nil, parameters: [Swift.String : Any]? = nil, completionHandler: @escaping (_ data: T?, _ response: Foundation.URLResponse?, _ statusCode: Swift.Int?, _ error: A2BCore.LBError?) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
  public func dataTask<T>(with url: Swift.String, method: A2BCore.HTTPMethod = .post, headers: [Swift.String : Swift.String]? = nil, parameters: [Swift.String : Any]? = nil, completionHandler: @escaping (_ data: [T]?, _ response: Foundation.URLResponse?, _ statusCode: Swift.Int?, _ error: A2BCore.LBError?) -> Swift.Void) where T : Swift.Decodable, T : Swift.Encodable
}
extension A2BCore.HTTPMethod : Swift.Equatable {}
extension A2BCore.HTTPMethod : Swift.Hashable {}
extension A2BCore.HTTPMethod : Swift.RawRepresentable {}
